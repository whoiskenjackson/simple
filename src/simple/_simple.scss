// ========================================
// Defaults
// ========================================

//
// Breakpoint Defaults
//

$-breakpoints: (
	large: '(min-width: 1042px)',
	medium: '(min-width: 768px) and (max-width: 1041px)',
	small: '(min-width: 320px) and (max-width: 767px)'
) !default;

//
// Grid Defaults
//

$column-amount: 12 !default;


// ========================================
// Mixins
// ========================================

//
// Breakpoint Mixin
//

@mixin breakpoint($breakpoint) {

	$breakpoint: map-get($-breakpoints, $breakpoint);

	@media #{$breakpoint} { @content }

}

//
// Breakpoint Mixin
//

@mixin column-start($position: auto) {
	grid-column-start: $position;
}

@mixin column-end($length: auto) {
	grid-column-end: $length;
}

@mixin row-start($position: auto) {
	grid-row-start: $position;
}

@mixin row-end($length: auto) {
	grid-row-end: $length;
}

@mixin grid($display: grid, $column-template: $column-amount, $row-template: column) {
	display: $display;
	grid-template-columns: repeat($column-amount, 1fr);

	@if $row-template == column {
		grid-auto-flow: column;
	} @else {
		grid-template-rows: $row-template;
	}
}

@mixin generate-column-classes($columns: $column-amount) {

	@each $breakpoint-name, $breakpoint-value in $-breakpoints {

		@for $i from 1 through $columns {

			@if ($breakpoint-name != "large") {

				@include breakpoint($breakpoint-name){
					.column-#{$breakpoint-name}-position-#{$i} {
						@include column-start($i);
					}
				}

				@include breakpoint($breakpoint-name){
					.column-#{$breakpoint-name}-span-#{$i} {
						@include column-end(span $i);
					}
				}

			} @else {

				.column-#{$breakpoint-name}-position-#{$i} {
					@include column-start($i);
				}

				.column-#{$breakpoint-name}-span-#{$i} {
					@include column-end(span $i);
				}

			}
		}

	}

}